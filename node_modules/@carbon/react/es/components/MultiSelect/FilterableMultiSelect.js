/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { slicedToArray as _slicedToArray, defineProperty as _defineProperty, extends as _extends, objectSpread2 as _objectSpread2$1 } from '../../_virtual/_rollupPluginBabelHelpers.js';
import { WarningFilled, WarningAltFilled } from '@carbon/icons-react';
import cx from 'classnames';
import Downshift from 'downshift';
import isEqual from 'lodash.isequal';
import PropTypes from 'prop-types';
import React__default, { useContext, useState, useRef, useEffect } from 'react';
import { defaultFilterItems } from '../ComboBox/tools/filter.js';
import { sortingPropTypes } from './MultiSelectPropTypes.js';
import ListBox from '../ListBox/index.js';
import Selection from '../../internal/Selection.js';
import { defaultItemToString } from './tools/itemToString.js';
import mergeRefs from '../../tools/mergeRefs.js';
import deprecate from '../../prop-types/deprecate.js';
import { useId } from '../../internal/useId.js';
import { defaultCompareItems, defaultSortItems } from './tools/sorting.js';
import { useFeatureFlag } from '../FeatureFlags/index.js';
import { usePrefix } from '../../internal/usePrefix.js';
import '../FluidForm/FluidForm.js';
import { FormContext } from '../FluidForm/FormContext.js';
import { match } from '../../internal/keyboard/match.js';
import ListBoxSelection from '../ListBox/next/ListBoxSelection.js';
import ListBoxTrigger from '../ListBox/next/ListBoxTrigger.js';
import { ListBoxSize } from '../ListBox/ListBoxPropTypes.js';
import { Space, Enter, Delete, Escape, Tab, Home, End } from '../../internal/keyboard/keys.js';

var _objectSpread2, _FilterableMultiSelec;
var FilterableMultiSelect = /*#__PURE__*/React__default.forwardRef(function FilterableMultiSelect(_ref, ref) {
  var _cx, _cx2, _cx3, _cx4;

  var ariaLabel = _ref['aria-label'],
      deprecatedAriaLabel = _ref.ariaLabel,
      containerClassName = _ref.className,
      compareItems = _ref.compareItems,
      direction = _ref.direction,
      disabled = _ref.disabled,
      downshiftProps = _ref.downshiftProps,
      filterItems = _ref.filterItems,
      helperText = _ref.helperText,
      hideLabel = _ref.hideLabel,
      id = _ref.id,
      initialSelectedItems = _ref.initialSelectedItems,
      invalid = _ref.invalid,
      invalidText = _ref.invalidText,
      items = _ref.items,
      ItemToElement = _ref.itemToElement,
      itemToString = _ref.itemToString,
      light = _ref.light,
      locale = _ref.locale,
      onInputValueChange = _ref.onInputValueChange,
      open = _ref.open,
      onChange = _ref.onChange,
      onMenuChange = _ref.onMenuChange,
      placeholder = _ref.placeholder,
      titleText = _ref.titleText,
      type = _ref.type,
      selectionFeedback = _ref.selectionFeedback,
      size = _ref.size,
      sortItems = _ref.sortItems,
      translateWithId = _ref.translateWithId,
      useTitleInItem = _ref.useTitleInItem,
      warn = _ref.warn,
      warnText = _ref.warnText;

  var _useContext = useContext(FormContext),
      isFluid = _useContext.isFluid;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isFocused = _useState2[0],
      setIsFocused = _useState2[1];

  var _useState3 = useState(open),
      _useState4 = _slicedToArray(_useState3, 2),
      isOpen = _useState4[0],
      setIsOpen = _useState4[1];

  var _useState5 = useState(open),
      _useState6 = _slicedToArray(_useState5, 2),
      prevOpen = _useState6[0],
      setPrevOpen = _useState6[1];

  var _useState7 = useState(''),
      _useState8 = _slicedToArray(_useState7, 2),
      inputValue = _useState8[0],
      setInputValue = _useState8[1];

  var _useState9 = useState(initialSelectedItems !== null && initialSelectedItems !== void 0 ? initialSelectedItems : []),
      _useState10 = _slicedToArray(_useState9, 2),
      topItems = _useState10[0],
      setTopItems = _useState10[1];

  var _useState11 = useState(false),
      _useState12 = _slicedToArray(_useState11, 2),
      inputFocused = _useState12[0],
      setInputFocused = _useState12[1];

  var _useState13 = useState(null),
      _useState14 = _slicedToArray(_useState13, 2),
      highlightedIndex = _useState14[0],
      setHighlightedIndex = _useState14[1];

  var _useState15 = useState(initialSelectedItems !== null && initialSelectedItems !== void 0 ? initialSelectedItems : []),
      _useState16 = _slicedToArray(_useState15, 2),
      currentSelectedItems = _useState16[0],
      setCurrentSelectedItems = _useState16[1];

  var textInput = useRef();
  var filterableMultiSelectInstanceId = useId();
  var enabled = useFeatureFlag('enable-v11-release');
  var prefix = usePrefix();

  if (prevOpen !== open) {
    setIsOpen(open);
    setPrevOpen(open);
  }

  var inline = type === 'inline';
  var showWarning = !invalid && warn;
  var wrapperClasses = cx("".concat(prefix, "--multi-select__wrapper"), "".concat(prefix, "--multi-select--filterable__wrapper"), "".concat(prefix, "--list-box__wrapper"), [enabled ? containerClassName : null], (_cx = {}, _defineProperty(_cx, "".concat(prefix, "--multi-select__wrapper--inline"), inline), _defineProperty(_cx, "".concat(prefix, "--list-box__wrapper--inline"), inline), _defineProperty(_cx, "".concat(prefix, "--multi-select__wrapper--inline--invalid"), inline && invalid), _defineProperty(_cx, "".concat(prefix, "--list-box__wrapper--inline--invalid"), inline && invalid), _defineProperty(_cx, "".concat(prefix, "--list-box--up"), direction === 'top'), _defineProperty(_cx, "".concat(prefix, "--list-box__wrapper--fluid--invalid"), isFluid && invalid), _defineProperty(_cx, "".concat(prefix, "--list-box__wrapper--fluid--focus"), isFluid && isFocused), _cx));
  var helperId = !helperText ? undefined : "filterablemultiselect-helper-text-".concat(filterableMultiSelectInstanceId);
  var labelId = "".concat(id, "-label");
  var titleClasses = cx((_cx2 = {}, _defineProperty(_cx2, "".concat(prefix, "--label"), true), _defineProperty(_cx2, "".concat(prefix, "--label--disabled"), disabled), _defineProperty(_cx2, "".concat(prefix, "--visually-hidden"), hideLabel), _cx2));
  var helperClasses = cx((_cx3 = {}, _defineProperty(_cx3, "".concat(prefix, "--form__helper-text"), true), _defineProperty(_cx3, "".concat(prefix, "--form__helper-text--disabled"), disabled), _cx3));
  var inputClasses = cx((_cx4 = {}, _defineProperty(_cx4, "".concat(prefix, "--text-input"), true), _defineProperty(_cx4, "".concat(prefix, "--text-input--empty"), !inputValue), _defineProperty(_cx4, "".concat(prefix, "--text-input--light"), light), _cx4));
  var helper = helperText ? /*#__PURE__*/React__default.createElement("div", {
    id: helperId,
    className: helperClasses
  }, helperText) : null;
  var menuId = "".concat(id, "__menu");
  var inputId = "".concat(id, "-input");
  useEffect(function () {
    if (!isOpen) {
      setTopItems(currentSelectedItems);
    }
  }, [currentSelectedItems, isOpen, setTopItems]);

  function handleOnChange(changes) {
    setCurrentSelectedItems(changes.selectedItems);

    if (onChange) {
      onChange(changes);
    }
  }

  function handleOnMenuChange(forceIsOpen) {
    var nextIsOpen = forceIsOpen !== null && forceIsOpen !== void 0 ? forceIsOpen : !isOpen;
    setIsOpen(nextIsOpen);

    if (onMenuChange) {
      onMenuChange(nextIsOpen);
    }
  }

  function handleOnOuterClick() {
    handleOnMenuChange(false);
  }

  function handleOnStateChange(changes) {
    var type = changes.type;
    var stateChangeTypes = Downshift.stateChangeTypes;

    switch (type) {
      case stateChangeTypes.keyDownArrowDown:
      case stateChangeTypes.keyDownArrowUp:
      case stateChangeTypes.keyDownHome:
      case stateChangeTypes.keyDownEnd:
        setHighlightedIndex(changes.highlightedIndex !== undefined ? changes.highlightedIndex : null);

        if (stateChangeTypes.keyDownArrowDown === type && !isOpen) {
          handleOnMenuChange(true);
        }

        break;

      case stateChangeTypes.keyDownEscape:
        handleOnMenuChange(false);
        break;
    }
  }

  function handleOnInputValueChange(inputValue, _ref2) {
    var type = _ref2.type;

    if (onInputValueChange) {
      onInputValueChange(inputValue);
    }

    if (type !== Downshift.stateChangeTypes.changeInput) {
      return;
    }

    if (Array.isArray(inputValue)) {
      clearInputValue();
    } else {
      setInputValue(inputValue);
    }

    if (inputValue && !isOpen) {
      handleOnMenuChange(true);
    } else if (!inputValue && isOpen) {
      handleOnMenuChange(false);
    }
  }

  function clearInputValue() {
    setInputValue('');

    if (textInput.current) {
      textInput.current.focus();
    }
  }

  return /*#__PURE__*/React__default.createElement(Selection, {
    disabled: disabled,
    onChange: handleOnChange,
    initialSelectedItems: initialSelectedItems,
    render: function render(_ref3) {
      var selectedItems = _ref3.selectedItems,
          onItemChange = _ref3.onItemChange,
          _clearSelection = _ref3.clearSelection;
      return /*#__PURE__*/React__default.createElement(Downshift, _extends({}, downshiftProps, {
        highlightedIndex: highlightedIndex,
        id: id,
        isOpen: isOpen,
        inputValue: inputValue,
        onInputValueChange: handleOnInputValueChange,
        onChange: function onChange(selectedItem) {
          if (selectedItem !== null) {
            onItemChange(selectedItem);
          }
        },
        itemToString: itemToString,
        onStateChange: handleOnStateChange,
        onOuterClick: handleOnOuterClick,
        selectedItem: selectedItems,
        labelId: labelId,
        menuId: menuId,
        inputId: inputId
      }), function (_ref4) {
        var _cx5;

        var getInputProps = _ref4.getInputProps,
            getItemProps = _ref4.getItemProps,
            getLabelProps = _ref4.getLabelProps,
            getMenuProps = _ref4.getMenuProps,
            getRootProps = _ref4.getRootProps,
            getToggleButtonProps = _ref4.getToggleButtonProps,
            isOpen = _ref4.isOpen,
            inputValue = _ref4.inputValue,
            selectedItem = _ref4.selectedItem;
        var className = cx("".concat(prefix, "--multi-select"), "".concat(prefix, "--combo-box"), "".concat(prefix, "--multi-select--filterable"), [enabled ? null : containerClassName], (_cx5 = {}, _defineProperty(_cx5, "".concat(prefix, "--multi-select--invalid"), invalid), _defineProperty(_cx5, "".concat(prefix, "--multi-select--invalid--focused"), invalid && inputFocused), _defineProperty(_cx5, "".concat(prefix, "--multi-select--open"), isOpen), _defineProperty(_cx5, "".concat(prefix, "--multi-select--inline"), inline), _defineProperty(_cx5, "".concat(prefix, "--multi-select--selected"), selectedItem.length > 0), _defineProperty(_cx5, "".concat(prefix, "--multi-select--filterable--input-focused"), inputFocused), _cx5));
        var rootProps = getRootProps({}, {
          suppressRefError: true
        });
        var labelProps = getLabelProps();
        var buttonProps = getToggleButtonProps({
          disabled: disabled,
          onClick: function onClick() {
            handleOnMenuChange(!isOpen);

            if (textInput.current) {
              textInput.current.focus();
            }
          },
          // When we moved the "root node" of Downshift to the <input> for
          // ARIA 1.2 compliance, we unfortunately hit this branch for the
          // "mouseup" event that downshift listens to:
          // https://github.com/downshift-js/downshift/blob/v5.2.1/src/downshift.js#L1051-L1065
          //
          // As a result, it will reset the state of the component and so we
          // stop the event from propagating to prevent this. This allows the
          // toggleMenu behavior for the toggleButton to correctly open and
          // close the menu.
          onMouseUp: function onMouseUp(event) {
            if (isOpen) {
              event.stopPropagation();
            }
          }
        });
        var inputProps = getInputProps({
          'aria-controls': isOpen ? menuId : null,
          'aria-describedby': helperText ? helperId : null,
          // Remove excess aria `aria-labelledby`. HTML <label for>
          // provides this aria information.
          'aria-labelledby': null,
          disabled: disabled,
          placeholder: placeholder,
          onClick: function onClick() {
            handleOnMenuChange(true);
          },
          onKeyDown: function onKeyDown(event) {
            if (match(event, Space)) {
              event.stopPropagation();
            }

            if (match(event, Enter)) {
              handleOnMenuChange(true);
            }

            if (!disabled) {
              if (match(event, Delete) || match(event, Escape)) {
                if (isOpen) {
                  handleOnMenuChange(true);
                  clearInputValue();
                  event.stopPropagation();
                } else if (!isOpen) {
                  clearInputValue();

                  _clearSelection();

                  event.stopPropagation();
                }
              }
            }

            if (match(event, Tab)) {
              handleOnMenuChange(false);
            }

            if (match(event, Home)) {
              event.target.setSelectionRange(0, 0);
            }

            if (match(event, End)) {
              event.target.setSelectionRange(event.target.value.length, event.target.value.length);
            }
          },
          onFocus: function onFocus() {
            setInputFocused(true);
          },
          onBlur: function onBlur() {
            setInputFocused(false);
            setInputValue('');
          }
        });
        var menuProps = getMenuProps({
          'aria-label': ariaLabel
        }, {
          suppressRefError: true
        });

        var handleFocus = function handleFocus(evt) {
          if (evt.target.classList.contains("".concat(prefix, "--tag__close-icon")) || evt.target.classList.contains("".concat(prefix, "--list-box__selection"))) {
            setIsFocused(false);
          } else {
            setIsFocused(evt.type === 'focus' ? true : false);
          }
        };

        return /*#__PURE__*/React__default.createElement("div", {
          className: wrapperClasses
        }, titleText ? /*#__PURE__*/React__default.createElement("label", _extends({
          className: titleClasses
        }, labelProps), titleText) : null, /*#__PURE__*/React__default.createElement(ListBox, {
          "aria-label": deprecatedAriaLabel || ariaLabel,
          onFocus: isFluid ? handleFocus : null,
          onBlur: isFluid ? handleFocus : null,
          className: className,
          disabled: disabled,
          light: light,
          ref: ref,
          invalid: invalid,
          invalidText: invalidText,
          warn: warn,
          warnText: warnText,
          isOpen: isOpen,
          size: size
        }, /*#__PURE__*/React__default.createElement("div", {
          className: "".concat(prefix, "--list-box__field")
        }, selectedItem.length > 0 && /*#__PURE__*/React__default.createElement(ListBoxSelection, {
          clearSelection: function clearSelection() {
            _clearSelection();

            if (textInput.current) {
              textInput.current.focus();
            }
          },
          selectionCount: selectedItem.length,
          translateWithId: translateWithId,
          disabled: disabled
        }), /*#__PURE__*/React__default.createElement("input", _extends({
          className: inputClasses
        }, rootProps, inputProps, {
          ref: mergeRefs(textInput, rootProps.ref)
        })), invalid && /*#__PURE__*/React__default.createElement(WarningFilled, {
          className: "".concat(prefix, "--list-box__invalid-icon")
        }), showWarning && /*#__PURE__*/React__default.createElement(WarningAltFilled, {
          className: "".concat(prefix, "--list-box__invalid-icon ").concat(prefix, "--list-box__invalid-icon--warning")
        }), inputValue && /*#__PURE__*/React__default.createElement(ListBoxSelection, {
          clearSelection: clearInputValue,
          disabled: disabled,
          translateWithId: translateWithId,
          onMouseUp: function onMouseUp(event) {
            // If we do not stop this event from propagating,
            // it seems like Downshift takes our event and
            // prevents us from getting `onClick` /
            // `clearSelection` from the underlying <button> in
            // ListBoxSelection
            event.stopPropagation();
          }
        }), /*#__PURE__*/React__default.createElement(ListBoxTrigger, _extends({}, buttonProps, {
          isOpen: isOpen,
          translateWithId: translateWithId
        }))), isOpen ? /*#__PURE__*/React__default.createElement(ListBox.Menu, menuProps, sortItems(filterItems(items, {
          itemToString: itemToString,
          inputValue: inputValue
        }), {
          selectedItems: {
            top: selectedItems,
            fixed: [],
            'top-after-reopen': topItems
          }[selectionFeedback],
          itemToString: itemToString,
          compareItems: compareItems,
          locale: locale
        }).map(function (item, index) {
          var itemProps = getItemProps({
            item: item,
            disabled: item.disabled
          });
          var itemText = itemToString(item);
          var isChecked = selectedItem.filter(function (selected) {
            return isEqual(selected, item);
          }).length > 0;
          return /*#__PURE__*/React__default.createElement(ListBox.MenuItem, _extends({
            key: itemProps.id,
            "aria-label": itemText,
            isActive: isChecked,
            isHighlighted: highlightedIndex === index,
            title: itemText
          }, itemProps), /*#__PURE__*/React__default.createElement("div", {
            className: "".concat(prefix, "--checkbox-wrapper")
          }, /*#__PURE__*/React__default.createElement("span", {
            title: useTitleInItem ? itemText : null,
            className: "".concat(prefix, "--checkbox-label"),
            "data-contained-checkbox-state": isChecked,
            id: "".concat(itemProps.id, "-item")
          }, ItemToElement ? /*#__PURE__*/React__default.createElement(ItemToElement, _extends({
            key: itemProps.id
          }, item)) : itemText)));
        })) : null), !inline && !invalid && !warn ? helper : null);
      });
    }
  });
});
FilterableMultiSelect.propTypes = _objectSpread2$1(_objectSpread2$1((_objectSpread2 = {}, _defineProperty(_objectSpread2, 'aria-label', PropTypes.string), _defineProperty(_objectSpread2, "ariaLabel", deprecate(PropTypes.string, 'This prop syntax has been deprecated. Please use the new `aria-label`.')), _defineProperty(_objectSpread2, "direction", PropTypes.oneOf(['top', 'bottom'])), _defineProperty(_objectSpread2, "disabled", PropTypes.bool), _defineProperty(_objectSpread2, "downshiftProps", PropTypes.shape(Downshift.propTypes)), _defineProperty(_objectSpread2, "hideLabel", PropTypes.bool), _defineProperty(_objectSpread2, "id", PropTypes.string.isRequired), _defineProperty(_objectSpread2, "initialSelectedItems", PropTypes.array), _defineProperty(_objectSpread2, "invalid", PropTypes.bool), _defineProperty(_objectSpread2, "invalidText", PropTypes.node), _defineProperty(_objectSpread2, "itemToElement", PropTypes.func), _defineProperty(_objectSpread2, "itemToString", PropTypes.func), _defineProperty(_objectSpread2, "items", PropTypes.array.isRequired), _defineProperty(_objectSpread2, "light", deprecate(PropTypes.bool, 'The `light` prop for `FilterableMultiSelect` has ' + 'been deprecated in favor of the new `Layer` component. It will be removed in the next major release.')), _defineProperty(_objectSpread2, "locale", PropTypes.string), _defineProperty(_objectSpread2, "onChange", PropTypes.func), _defineProperty(_objectSpread2, "onInputValueChange", PropTypes.func), _defineProperty(_objectSpread2, "onMenuChange", PropTypes.func), _defineProperty(_objectSpread2, "open", PropTypes.bool), _defineProperty(_objectSpread2, "placeholder", PropTypes.string), _defineProperty(_objectSpread2, "selectionFeedback", PropTypes.oneOf(['top', 'fixed', 'top-after-reopen'])), _defineProperty(_objectSpread2, "size", ListBoxSize), _objectSpread2), sortingPropTypes), {}, {
  /**
   * Callback function for translating ListBoxMenuIcon SVG title
   */
  translateWithId: PropTypes.func,

  /**
   * Specify title to show title on hover
   */
  useTitleInItem: PropTypes.bool,

  /**
   * Specify whether the control is currently in warning state
   */
  warn: PropTypes.bool,

  /**
   * Provide the text that is displayed when the control is in warning state
   */
  warnText: PropTypes.node
});
FilterableMultiSelect.defaultProps = (_FilterableMultiSelec = {}, _defineProperty(_FilterableMultiSelec, 'aria-label', 'Choose an item'), _defineProperty(_FilterableMultiSelec, "compareItems", defaultCompareItems), _defineProperty(_FilterableMultiSelec, "direction", 'bottom'), _defineProperty(_FilterableMultiSelec, "disabled", false), _defineProperty(_FilterableMultiSelec, "filterItems", defaultFilterItems), _defineProperty(_FilterableMultiSelec, "initialSelectedItems", []), _defineProperty(_FilterableMultiSelec, "itemToString", defaultItemToString), _defineProperty(_FilterableMultiSelec, "locale", 'en'), _defineProperty(_FilterableMultiSelec, "sortItems", defaultSortItems), _defineProperty(_FilterableMultiSelec, "open", false), _defineProperty(_FilterableMultiSelec, "selectionFeedback", 'top-after-reopen'), _FilterableMultiSelec);
var FilterableMultiSelect$1 = FilterableMultiSelect;

export { FilterableMultiSelect$1 as default };

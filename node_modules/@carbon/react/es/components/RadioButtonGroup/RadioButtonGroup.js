/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { objectWithoutProperties as _objectWithoutProperties, slicedToArray as _slicedToArray, defineProperty as _defineProperty, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import PropTypes from 'prop-types';
import React__default, { useState, useRef } from 'react';
import cx from 'classnames';
import { Legend } from '../Text/index.js';
import { usePrefix } from '../../internal/usePrefix.js';
import { WarningFilled, WarningAltFilled } from '@carbon/icons-react';
import mergeRefs from '../../tools/mergeRefs.js';
import setupGetInstanceId from '../../tools/setupGetInstanceId.js';

var _excluded = ["children", "className", "defaultSelected", "disabled", "helperText", "invalid", "invalidText", "labelPosition", "legendText", "name", "onChange", "orientation", "readOnly", "valueSelected", "warn", "warnText"];
var getInstanceId = setupGetInstanceId();
var RadioButtonGroup = /*#__PURE__*/React__default.forwardRef(function (props, ref) {
  var _classNames;

  var children = props.children,
      className = props.className,
      defaultSelected = props.defaultSelected,
      disabled = props.disabled,
      helperText = props.helperText,
      _props$invalid = props.invalid,
      invalid = _props$invalid === void 0 ? false : _props$invalid,
      invalidText = props.invalidText,
      _props$labelPosition = props.labelPosition,
      labelPosition = _props$labelPosition === void 0 ? 'right' : _props$labelPosition,
      legendText = props.legendText,
      name = props.name,
      _props$onChange = props.onChange,
      onChange = _props$onChange === void 0 ? function () {} : _props$onChange,
      _props$orientation = props.orientation,
      orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation,
      readOnly = props.readOnly,
      valueSelected = props.valueSelected,
      _props$warn = props.warn,
      warn = _props$warn === void 0 ? false : _props$warn,
      warnText = props.warnText,
      rest = _objectWithoutProperties(props, _excluded);

  var prefix = usePrefix();

  var _useState = useState(valueSelected !== null && valueSelected !== void 0 ? valueSelected : defaultSelected),
      _useState2 = _slicedToArray(_useState, 2),
      selected = _useState2[0],
      setSelected = _useState2[1];

  var _useState3 = useState(valueSelected),
      _useState4 = _slicedToArray(_useState3, 2),
      prevValueSelected = _useState4[0],
      setPrevValueSelected = _useState4[1];

  var _useRef = useRef(getInstanceId()),
      radioButtonGroupInstanceId = _useRef.current;
  /**
   * prop + state alignment - getDerivedStateFromProps
   * only update if selected prop changes
   */


  if (valueSelected !== prevValueSelected) {
    setSelected(valueSelected);
    setPrevValueSelected(valueSelected);
  }

  function getRadioButtons() {
    var mappedChildren = React__default.Children.map(children, function (radioButton) {
      var _props;

      var _ref = (_props = radioButton === null || radioButton === void 0 ? void 0 : radioButton.props) !== null && _props !== void 0 ? _props : undefined,
          value = _ref.value;

      var newProps = {
        name: name,
        key: value,
        value: value,
        onChange: handleOnChange,
        checked: value === selected
      };

      if (!selected && radioButton !== null && radioButton !== void 0 && radioButton.props.checked) {
        newProps.checked = true;
      }

      if (radioButton) {
        return /*#__PURE__*/React__default.cloneElement(radioButton, newProps);
      }
    });
    return mappedChildren;
  }

  function handleOnChange(newSelection, value, evt) {
    if (!readOnly) {
      if (newSelection !== selected) {
        setSelected(newSelection);
        onChange(newSelection, name, evt);
      }
    }
  }

  var showWarning = !readOnly && !invalid && warn;
  var showHelper = !invalid && !disabled && !warn;
  var wrapperClasses = cx("".concat(prefix, "--form-item"), className);
  var fieldsetClasses = cx("".concat(prefix, "--radio-button-group"), (_classNames = {}, _defineProperty(_classNames, "".concat(prefix, "--radio-button-group--").concat(orientation), orientation === 'vertical'), _defineProperty(_classNames, "".concat(prefix, "--radio-button-group--label-").concat(labelPosition), labelPosition), _defineProperty(_classNames, "".concat(prefix, "--radio-button-group--readonly"), readOnly), _defineProperty(_classNames, "".concat(prefix, "--radio-button-group--invalid"), !readOnly && invalid), _defineProperty(_classNames, "".concat(prefix, "--radio-button-group--warning"), showWarning), _classNames));
  var helperClasses = cx("".concat(prefix, "--form__helper-text"), _defineProperty({}, "".concat(prefix, "--form__helper-text--disabled"), disabled));
  var helperId = !helperText ? undefined : "radio-button-group-helper-text-".concat(radioButtonGroupInstanceId);
  var helper = helperText ? /*#__PURE__*/React__default.createElement("div", {
    id: helperId,
    className: helperClasses
  }, helperText) : null;
  var divRef = useRef(null);
  return /*#__PURE__*/React__default.createElement("div", {
    className: wrapperClasses,
    ref: mergeRefs(divRef, ref)
  }, /*#__PURE__*/React__default.createElement("fieldset", _extends({
    className: fieldsetClasses,
    disabled: disabled,
    "data-invalid": invalid ? true : undefined,
    "aria-readonly": readOnly,
    "aria-describedby": showHelper && helperText ? helperId : undefined
  }, rest), legendText && /*#__PURE__*/React__default.createElement(Legend, {
    className: "".concat(prefix, "--label")
  }, legendText), getRadioButtons()), /*#__PURE__*/React__default.createElement("div", {
    className: "".concat(prefix, "--radio-button__validation-msg")
  }, !readOnly && invalid && /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(WarningFilled, {
    className: "".concat(prefix, "--radio-button__invalid-icon")
  }), /*#__PURE__*/React__default.createElement("div", {
    className: "".concat(prefix, "--form-requirement")
  }, invalidText)), showWarning && /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(WarningAltFilled, {
    className: "".concat(prefix, "--radio-button__invalid-icon ").concat(prefix, "--radio-button__invalid-icon--warning")
  }), /*#__PURE__*/React__default.createElement("div", {
    className: "".concat(prefix, "--form-requirement")
  }, warnText))), showHelper && helper);
});
RadioButtonGroup.propTypes = {
  /**
   * Provide a collection of `<RadioButton>` components to render in the group
   */
  children: PropTypes.node,

  /**
   * Provide an optional className to be applied to the container node
   */
  className: PropTypes.string,

  /**
   * Specify the `<RadioButton>` to be selected by default
   */
  defaultSelected: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
   * Specify whether the group is disabled
   */
  disabled: PropTypes.bool,

  /**
   * Provide text that is used alongside the control label for additional help
   */
  helperText: PropTypes.node,

  /**
   * Specify whether the control is currently invalid
   */
  invalid: PropTypes.bool,

  /**
   * Provide the text that is displayed when the control is in an invalid state
   */
  invalidText: PropTypes.node,

  /**
   * Provide where label text should be placed
   */
  labelPosition: PropTypes.oneOf(['left', 'right']),

  /**
   * Provide a legend to the RadioButtonGroup input that you are
   * exposing to the user
   */
  legendText: PropTypes.node,

  /**
   * Specify the name of the underlying `<input>` nodes
   */
  name: PropTypes.string.isRequired,

  /**
   * Provide an optional `onChange` hook that is called whenever the value of
   * the group changes
   */
  onChange: PropTypes.func,

  /**
   * Provide where radio buttons should be placed
   */
  orientation: PropTypes.oneOf(['horizontal', 'vertical']),

  /**
   * Whether the RadioButtonGroup should be read-only
   */
  readOnly: PropTypes.bool,

  /**
   * Specify the value that is currently selected in the group
   */
  valueSelected: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
   * Specify whether the control is currently in warning state
   */
  warn: PropTypes.bool,

  /**
   * Provide the text that is displayed when the control is in warning state
   */
  warnText: PropTypes.node
};
RadioButtonGroup.displayName = 'RadioButtonGroup';
var RadioButtonGroup$1 = RadioButtonGroup;

export { RadioButtonGroup$1 as default };

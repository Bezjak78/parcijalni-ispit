/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { objectWithoutProperties as _objectWithoutProperties, defineProperty as _defineProperty, extends as _extends, slicedToArray as _slicedToArray } from '../../_virtual/_rollupPluginBabelHelpers.js';
import PropTypes from 'prop-types';
import React__default, { useState, useRef, useEffect } from 'react';
import deprecate from '../../prop-types/deprecate.js';
import cx from 'classnames';
import { Close, WarningAltFilled, InformationFilled, InformationSquareFilled, ErrorFilled, CheckmarkFilled, WarningFilled } from '@carbon/icons-react';
import Button from '../Button/Button.js';
import useIsomorphicEffect from '../../internal/useIsomorphicEffect.js';
import { useNoInteractiveChildren } from '../../internal/useNoInteractiveChildren.js';
import { usePrefix } from '../../internal/usePrefix.js';
import { useId } from '../../internal/useId.js';
import { matches } from '../../internal/keyboard/match.js';
import { Escape } from '../../internal/keyboard/keys.js';

var _NotificationButton$p, _NotificationButton$d, _iconTypes, _ToastNotification$pr, _InlineNotification$p, _ActionableNotificati;

var _excluded = ["children", "className", "onClick", "inline"],
    _excluded2 = ["aria-label", "ariaLabel", "className", "type", "renderIcon", "name", "notificationType"],
    _excluded3 = ["aria-label", "ariaLabel", "role", "onClose", "onCloseButtonClick", "statusIconDescription", "className", "children", "kind", "lowContrast", "hideCloseButton", "timeout", "title", "caption", "subtitle"],
    _excluded4 = ["aria-label", "children", "title", "subtitle", "role", "onClose", "onCloseButtonClick", "statusIconDescription", "className", "kind", "lowContrast", "hideCloseButton"],
    _excluded5 = ["actionButtonLabel", "aria-label", "ariaLabel", "children", "role", "onActionButtonClick", "onClose", "onCloseButtonClick", "statusIconDescription", "className", "inline", "kind", "lowContrast", "hideCloseButton", "hasFocus", "closeOnEscape", "title", "subtitle"];
/**
 * Conditionally call a callback when the escape key is pressed
 * @param {node} ref - ref of the container element to scope the functionality to
 * @param {func} callback - function to be called
 * @param {bool} override - escape hatch to conditionally call the callback
 */

function useEscapeToClose(ref, callback) {
  var override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

  var handleKeyDown = function handleKeyDown(event) {
    // The callback should only be called when focus is on or within the container
    var elementContainsFocus = ref.current && document.activeElement === ref.current || ref.current.contains(document.activeElement);

    if (matches(event, [Escape]) && override && elementContainsFocus) {
      callback(event);
    }
  };

  useIsomorphicEffect(function () {
    document.addEventListener('keydown', handleKeyDown, false);
    return function () {
      return document.removeEventListener('keydown', handleKeyDown, false);
    };
  });
}

function NotificationActionButton(_ref) {
  var children = _ref.children,
      customClassName = _ref.className,
      onClick = _ref.onClick,
      inline = _ref.inline,
      rest = _objectWithoutProperties(_ref, _excluded);

  var prefix = usePrefix();
  var className = cx(customClassName, _defineProperty({}, "".concat(prefix, "--actionable-notification__action-button"), true));
  return /*#__PURE__*/React__default.createElement(Button, _extends({
    className: className,
    kind: inline ? 'ghost' : 'tertiary',
    onClick: onClick,
    size: "sm"
  }, rest), children);
}
NotificationActionButton.propTypes = {
  /**
   * Specify the content of the notification action button.
   */
  children: PropTypes.node,

  /**
   * Specify an optional className to be applied to the notification action button
   */
  className: PropTypes.string,

  /**
   * Specify if the visual treatment of the button should be for an inline notification
   */
  inline: PropTypes.bool,

  /**
   * Optionally specify a click handler for the notification action button.
   */
  onClick: PropTypes.func
};
function NotificationButton(_ref2) {
  var ariaLabel = _ref2['aria-label'],
      deprecatedAriaLabel = _ref2.ariaLabel,
      className = _ref2.className,
      type = _ref2.type,
      IconTag = _ref2.renderIcon,
      name = _ref2.name,
      notificationType = _ref2.notificationType,
      rest = _objectWithoutProperties(_ref2, _excluded2);

  var prefix = usePrefix();
  var buttonClassName = cx(className, _defineProperty({}, "".concat(prefix, "--").concat(notificationType, "-notification__close-button"), notificationType));
  var iconClassName = cx(_defineProperty({}, "".concat(prefix, "--").concat(notificationType, "-notification__close-icon"), notificationType));
  return /*#__PURE__*/React__default.createElement("button", _extends({}, rest, {
    // eslint-disable-next-line react/button-has-type
    type: type,
    "aria-label": deprecatedAriaLabel || ariaLabel,
    title: deprecatedAriaLabel || ariaLabel,
    className: buttonClassName
  }), IconTag && /*#__PURE__*/React__default.createElement(IconTag, {
    className: iconClassName,
    name: name
  }));
}
NotificationButton.propTypes = (_NotificationButton$p = {}, _defineProperty(_NotificationButton$p, 'aria-label', PropTypes.string), _defineProperty(_NotificationButton$p, "ariaLabel", deprecate(PropTypes.string, 'This prop syntax has been deprecated. Please use the new `aria-label`.')), _defineProperty(_NotificationButton$p, "className", PropTypes.string), _defineProperty(_NotificationButton$p, "name", PropTypes.string), _defineProperty(_NotificationButton$p, "notificationType", PropTypes.oneOf(['toast', 'inline', 'actionable'])), _defineProperty(_NotificationButton$p, "renderIcon", PropTypes.oneOfType([PropTypes.func, PropTypes.object])), _defineProperty(_NotificationButton$p, "type", PropTypes.string), _NotificationButton$p);
NotificationButton.defaultProps = (_NotificationButton$d = {}, _defineProperty(_NotificationButton$d, 'aria-label', 'close notification'), _defineProperty(_NotificationButton$d, "notificationType", 'toast'), _defineProperty(_NotificationButton$d, "type", 'button'), _defineProperty(_NotificationButton$d, "renderIcon", Close), _NotificationButton$d);
var iconTypes = (_iconTypes = {
  error: ErrorFilled,
  success: CheckmarkFilled,
  warning: WarningFilled
}, _defineProperty(_iconTypes, 'warning-alt', WarningAltFilled), _defineProperty(_iconTypes, "info", InformationFilled), _defineProperty(_iconTypes, 'info-square', InformationSquareFilled), _iconTypes);

function NotificationIcon(_ref3) {
  var iconDescription = _ref3.iconDescription,
      kind = _ref3.kind,
      notificationType = _ref3.notificationType;
  var prefix = usePrefix();
  var IconForKind = iconTypes[kind];

  if (!IconForKind) {
    return null;
  }

  return /*#__PURE__*/React__default.createElement(IconForKind, {
    className: "".concat(prefix, "--").concat(notificationType, "-notification__icon"),
    size: 20
  }, /*#__PURE__*/React__default.createElement("title", null, iconDescription));
}

NotificationIcon.propTypes = {
  iconDescription: PropTypes.string.isRequired,
  kind: PropTypes.oneOf(['error', 'success', 'warning', 'warning-alt', 'info', 'info-square']).isRequired,
  notificationType: PropTypes.oneOf(['inline', 'toast']).isRequired
};
function ToastNotification(_ref4) {
  var _cx4;

  var ariaLabel = _ref4['aria-label'],
      deprecatedAriaLabel = _ref4.ariaLabel,
      role = _ref4.role,
      onClose = _ref4.onClose,
      onCloseButtonClick = _ref4.onCloseButtonClick,
      statusIconDescription = _ref4.statusIconDescription,
      className = _ref4.className,
      children = _ref4.children,
      kind = _ref4.kind,
      lowContrast = _ref4.lowContrast,
      hideCloseButton = _ref4.hideCloseButton,
      timeout = _ref4.timeout,
      title = _ref4.title,
      caption = _ref4.caption,
      subtitle = _ref4.subtitle,
      rest = _objectWithoutProperties(_ref4, _excluded3);

  var _useState = useState(true),
      _useState2 = _slicedToArray(_useState, 2),
      isOpen = _useState2[0],
      setIsOpen = _useState2[1];

  var prefix = usePrefix();
  var containerClassName = cx(className, (_cx4 = {}, _defineProperty(_cx4, "".concat(prefix, "--toast-notification"), true), _defineProperty(_cx4, "".concat(prefix, "--toast-notification--low-contrast"), lowContrast), _defineProperty(_cx4, "".concat(prefix, "--toast-notification--").concat(kind), kind), _cx4));
  var contentRef = useRef(null);
  useNoInteractiveChildren(contentRef);

  var handleClose = function handleClose(evt) {
    if (!onClose || onClose(evt) !== false) {
      setIsOpen(false);
    }
  };

  var ref = useRef(null);

  function handleCloseButtonClick(event) {
    onCloseButtonClick(event);
    handleClose(event);
  }

  var savedOnClose = useRef(onClose);
  useEffect(function () {
    savedOnClose.current = onClose;
  });
  useEffect(function () {
    if (!timeout) {
      return;
    }

    var timeoutId = window.setTimeout(function (event) {
      setIsOpen(false);

      if (savedOnClose.current) {
        savedOnClose.current(event);
      }
    }, timeout);
    return function () {
      window.clearTimeout(timeoutId);
    };
  }, [timeout]);

  if (!isOpen) {
    return null;
  }

  return /*#__PURE__*/React__default.createElement("div", _extends({
    ref: ref
  }, rest, {
    role: role,
    className: containerClassName
  }), /*#__PURE__*/React__default.createElement(NotificationIcon, {
    notificationType: "toast",
    kind: kind,
    iconDescription: statusIconDescription || "".concat(kind, " icon")
  }), /*#__PURE__*/React__default.createElement("div", {
    ref: contentRef,
    className: "".concat(prefix, "--toast-notification__details")
  }, title && /*#__PURE__*/React__default.createElement("div", {
    className: "".concat(prefix, "--toast-notification__title")
  }, title), subtitle && /*#__PURE__*/React__default.createElement("div", {
    className: "".concat(prefix, "--toast-notification__subtitle")
  }, subtitle), caption && /*#__PURE__*/React__default.createElement("div", {
    className: "".concat(prefix, "--toast-notification__caption")
  }, caption), children), !hideCloseButton && /*#__PURE__*/React__default.createElement(NotificationButton, {
    notificationType: "toast",
    onClick: handleCloseButtonClick,
    "aria-hidden": "true",
    "aria-label": deprecatedAriaLabel || ariaLabel,
    tabIndex: "-1"
  }));
}
ToastNotification.propTypes = (_ToastNotification$pr = {}, _defineProperty(_ToastNotification$pr, 'aria-label', PropTypes.string), _defineProperty(_ToastNotification$pr, "ariaLabel", deprecate(PropTypes.string, 'This prop syntax has been deprecated. Please use the new `aria-label`.')), _defineProperty(_ToastNotification$pr, "caption", PropTypes.string), _defineProperty(_ToastNotification$pr, "children", PropTypes.node), _defineProperty(_ToastNotification$pr, "className", PropTypes.string), _defineProperty(_ToastNotification$pr, "hideCloseButton", PropTypes.bool), _defineProperty(_ToastNotification$pr, "kind", PropTypes.oneOf(['error', 'info', 'info-square', 'success', 'warning', 'warning-alt'])), _defineProperty(_ToastNotification$pr, "lowContrast", PropTypes.bool), _defineProperty(_ToastNotification$pr, "onClose", PropTypes.func), _defineProperty(_ToastNotification$pr, "onCloseButtonClick", PropTypes.func), _defineProperty(_ToastNotification$pr, "role", PropTypes.oneOf(['alert', 'log', 'status'])), _defineProperty(_ToastNotification$pr, "statusIconDescription", PropTypes.string), _defineProperty(_ToastNotification$pr, "subtitle", PropTypes.string), _defineProperty(_ToastNotification$pr, "timeout", PropTypes.number), _defineProperty(_ToastNotification$pr, "title", PropTypes.string), _ToastNotification$pr);
ToastNotification.defaultProps = {
  kind: 'error',
  role: 'status',
  onCloseButtonClick: function onCloseButtonClick() {},
  hideCloseButton: false,
  timeout: 0
};
function InlineNotification(_ref5) {
  var _cx5;

  var ariaLabel = _ref5['aria-label'],
      children = _ref5.children,
      title = _ref5.title,
      subtitle = _ref5.subtitle,
      role = _ref5.role,
      onClose = _ref5.onClose,
      onCloseButtonClick = _ref5.onCloseButtonClick,
      statusIconDescription = _ref5.statusIconDescription,
      className = _ref5.className,
      kind = _ref5.kind,
      lowContrast = _ref5.lowContrast,
      hideCloseButton = _ref5.hideCloseButton,
      rest = _objectWithoutProperties(_ref5, _excluded4);

  var _useState3 = useState(true),
      _useState4 = _slicedToArray(_useState3, 2),
      isOpen = _useState4[0],
      setIsOpen = _useState4[1];

  var prefix = usePrefix();
  var containerClassName = cx(className, (_cx5 = {}, _defineProperty(_cx5, "".concat(prefix, "--inline-notification"), true), _defineProperty(_cx5, "".concat(prefix, "--inline-notification--low-contrast"), lowContrast), _defineProperty(_cx5, "".concat(prefix, "--inline-notification--").concat(kind), kind), _defineProperty(_cx5, "".concat(prefix, "--inline-notification--hide-close-button"), hideCloseButton), _cx5));
  var contentRef = useRef(null);
  useNoInteractiveChildren(contentRef);

  var handleClose = function handleClose(evt) {
    if (!onClose || onClose(evt) !== false) {
      setIsOpen(false);
    }
  };

  var ref = useRef(null);

  function handleCloseButtonClick(event) {
    onCloseButtonClick(event);
    handleClose(event);
  }

  if (!isOpen) {
    return null;
  }

  return /*#__PURE__*/React__default.createElement("div", _extends({
    ref: ref
  }, rest, {
    role: role,
    className: containerClassName
  }), /*#__PURE__*/React__default.createElement("div", {
    className: "".concat(prefix, "--inline-notification__details")
  }, /*#__PURE__*/React__default.createElement(NotificationIcon, {
    notificationType: "inline",
    kind: kind,
    iconDescription: statusIconDescription || "".concat(kind, " icon")
  }), /*#__PURE__*/React__default.createElement("div", {
    ref: contentRef,
    className: "".concat(prefix, "--inline-notification__text-wrapper")
  }, title && /*#__PURE__*/React__default.createElement("div", {
    className: "".concat(prefix, "--inline-notification__title")
  }, title), subtitle && /*#__PURE__*/React__default.createElement("div", {
    className: "".concat(prefix, "--inline-notification__subtitle")
  }, subtitle), children)), !hideCloseButton && /*#__PURE__*/React__default.createElement(NotificationButton, {
    notificationType: "inline",
    onClick: handleCloseButtonClick,
    "aria-hidden": "true",
    "aria-label": ariaLabel,
    tabIndex: "-1"
  }));
}
InlineNotification.propTypes = (_InlineNotification$p = {}, _defineProperty(_InlineNotification$p, 'aria-label', PropTypes.string), _defineProperty(_InlineNotification$p, "children", PropTypes.node), _defineProperty(_InlineNotification$p, "className", PropTypes.string), _defineProperty(_InlineNotification$p, "hideCloseButton", PropTypes.bool), _defineProperty(_InlineNotification$p, "kind", PropTypes.oneOf(['error', 'info', 'info-square', 'success', 'warning', 'warning-alt'])), _defineProperty(_InlineNotification$p, "lowContrast", PropTypes.bool), _defineProperty(_InlineNotification$p, "onClose", PropTypes.func), _defineProperty(_InlineNotification$p, "onCloseButtonClick", PropTypes.func), _defineProperty(_InlineNotification$p, "role", PropTypes.oneOf(['alert', 'log', 'status'])), _defineProperty(_InlineNotification$p, "statusIconDescription", PropTypes.string), _defineProperty(_InlineNotification$p, "subtitle", PropTypes.string), _defineProperty(_InlineNotification$p, "title", PropTypes.string), _InlineNotification$p);
InlineNotification.defaultProps = {
  kind: 'error',
  role: 'status',
  onCloseButtonClick: function onCloseButtonClick() {},
  hideCloseButton: false
};
function ActionableNotification(_ref6) {
  var _cx6;

  var actionButtonLabel = _ref6.actionButtonLabel,
      ariaLabel = _ref6['aria-label'],
      deprecatedAriaLabel = _ref6.ariaLabel,
      children = _ref6.children,
      role = _ref6.role,
      onActionButtonClick = _ref6.onActionButtonClick,
      onClose = _ref6.onClose,
      onCloseButtonClick = _ref6.onCloseButtonClick,
      statusIconDescription = _ref6.statusIconDescription,
      className = _ref6.className,
      inline = _ref6.inline,
      kind = _ref6.kind,
      lowContrast = _ref6.lowContrast,
      hideCloseButton = _ref6.hideCloseButton,
      hasFocus = _ref6.hasFocus,
      closeOnEscape = _ref6.closeOnEscape,
      title = _ref6.title,
      subtitle = _ref6.subtitle,
      rest = _objectWithoutProperties(_ref6, _excluded5);

  var _useState5 = useState(true),
      _useState6 = _slicedToArray(_useState5, 2),
      isOpen = _useState6[0],
      setIsOpen = _useState6[1];

  var prefix = usePrefix();
  var id = useId('actionable-notification');
  var containerClassName = cx(className, (_cx6 = {}, _defineProperty(_cx6, "".concat(prefix, "--actionable-notification"), true), _defineProperty(_cx6, "".concat(prefix, "--actionable-notification--toast"), !inline), _defineProperty(_cx6, "".concat(prefix, "--actionable-notification--low-contrast"), lowContrast), _defineProperty(_cx6, "".concat(prefix, "--actionable-notification--").concat(kind), kind), _defineProperty(_cx6, "".concat(prefix, "--actionable-notification--hide-close-button"), hideCloseButton), _cx6));
  var ref = useRef(null);
  useIsomorphicEffect(function () {
    if (ref.current && hasFocus) {
      ref.current.focus();
    }
  });

  var handleClose = function handleClose(evt) {
    if (!onClose || onClose(evt) !== false) {
      setIsOpen(false);
    }
  };

  useEscapeToClose(ref, handleCloseButtonClick, closeOnEscape);

  function handleCloseButtonClick(event) {
    onCloseButtonClick(event);
    handleClose(event);
  }

  if (!isOpen) {
    return null;
  }

  return /*#__PURE__*/React__default.createElement("div", _extends({}, rest, {
    ref: ref,
    role: role,
    className: containerClassName,
    "aria-labelledby": title ? id : undefined
  }), /*#__PURE__*/React__default.createElement("div", {
    className: "".concat(prefix, "--actionable-notification__details")
  }, /*#__PURE__*/React__default.createElement(NotificationIcon, {
    notificationType: inline ? 'inline' : 'toast',
    kind: kind,
    iconDescription: statusIconDescription || "".concat(kind, " icon")
  }), /*#__PURE__*/React__default.createElement("div", {
    className: "".concat(prefix, "--actionable-notification__text-wrapper")
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "".concat(prefix, "--actionable-notification__content")
  }, title && /*#__PURE__*/React__default.createElement("div", {
    className: "".concat(prefix, "--actionable-notification__title"),
    id: id
  }, title), subtitle && /*#__PURE__*/React__default.createElement("div", {
    className: "".concat(prefix, "--actionable-notification__subtitle")
  }, subtitle), children))), /*#__PURE__*/React__default.createElement(NotificationActionButton, {
    onClick: onActionButtonClick,
    inline: inline
  }, actionButtonLabel), !hideCloseButton && /*#__PURE__*/React__default.createElement(NotificationButton, {
    "aria-label": deprecatedAriaLabel || ariaLabel,
    notificationType: "actionable",
    onClick: handleCloseButtonClick
  }));
}
ActionableNotification.propTypes = (_ActionableNotificati = {
  /**
   * Pass in the action button label that will be rendered within the ActionableNotification.
   */
  actionButtonLabel: PropTypes.string.isRequired
}, _defineProperty(_ActionableNotificati, 'aria-label', PropTypes.string), _defineProperty(_ActionableNotificati, "ariaLabel", deprecate(PropTypes.string, 'This prop syntax has been deprecated. Please use the new `aria-label`.')), _defineProperty(_ActionableNotificati, "children", PropTypes.node), _defineProperty(_ActionableNotificati, "className", PropTypes.string), _defineProperty(_ActionableNotificati, "closeOnEscape", PropTypes.bool), _defineProperty(_ActionableNotificati, "hasFocus", PropTypes.bool), _defineProperty(_ActionableNotificati, "hideCloseButton", PropTypes.bool), _defineProperty(_ActionableNotificati, "inline", PropTypes.bool), _defineProperty(_ActionableNotificati, "kind", PropTypes.oneOf(['error', 'info', 'info-square', 'success', 'warning', 'warning-alt']).isRequired), _defineProperty(_ActionableNotificati, "lowContrast", PropTypes.bool), _defineProperty(_ActionableNotificati, "onActionButtonClick", PropTypes.func), _defineProperty(_ActionableNotificati, "onClose", PropTypes.func), _defineProperty(_ActionableNotificati, "onCloseButtonClick", PropTypes.func), _defineProperty(_ActionableNotificati, "role", PropTypes.string), _defineProperty(_ActionableNotificati, "statusIconDescription", PropTypes.string), _defineProperty(_ActionableNotificati, "subtitle", PropTypes.string), _defineProperty(_ActionableNotificati, "title", PropTypes.string), _ActionableNotificati);
ActionableNotification.defaultProps = {
  kind: 'error',
  role: 'alertdialog',
  onCloseButtonClick: function onCloseButtonClick() {},
  hideCloseButton: false,
  hasFocus: true,
  closeOnEscape: true,
  inline: false
};

export { ActionableNotification, InlineNotification, NotificationActionButton, NotificationButton, ToastNotification };

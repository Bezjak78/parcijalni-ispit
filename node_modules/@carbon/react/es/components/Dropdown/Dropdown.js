/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { defineProperty as _defineProperty, typeof as _typeof, objectWithoutProperties as _objectWithoutProperties, objectSpread2 as _objectSpread2, slicedToArray as _slicedToArray, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import React__default, { useContext, useRef, useState } from 'react';
import { useSelect } from 'downshift';
import cx from 'classnames';
import PropTypes from 'prop-types';
import { WarningFilled, WarningAltFilled, Checkmark } from '@carbon/icons-react';
import ListBox from '../ListBox/index.js';
import mergeRefs from '../../tools/mergeRefs.js';
import deprecate from '../../prop-types/deprecate.js';
import { useFeatureFlag } from '../FeatureFlags/index.js';
import { usePrefix } from '../../internal/usePrefix.js';
import '../FluidForm/FluidForm.js';
import { FormContext } from '../FluidForm/FormContext.js';
import setupGetInstanceId from '../../tools/setupGetInstanceId.js';
import { ListBoxSize, ListBoxType } from '../ListBox/ListBoxPropTypes.js';

var _Dropdown$propTypes;

var _excluded = ["className", "disabled", "direction", "items", "label", "aria-label", "ariaLabel", "itemToString", "itemToElement", "renderSelectedItem", "type", "size", "onChange", "id", "titleText", "hideLabel", "helperText", "translateWithId", "light", "invalid", "invalidText", "warn", "warnText", "initialSelectedItem", "selectedItem", "downshiftProps", "readOnly"];
var getInstanceId = setupGetInstanceId();

var defaultItemToString = function defaultItemToString(item) {
  if (typeof item === 'string') {
    return item;
  }

  if (typeof item === 'number') {
    return "".concat(item);
  }

  if (item !== null && _typeof(item) === 'object' && 'label' in item && typeof item['label'] === 'string') {
    return item['label'];
  }

  return '';
};

var Dropdown = /*#__PURE__*/React__default.forwardRef(function (_ref, ref) {
  var _cx, _cx2, _cx4;

  var containerClassName = _ref.className,
      disabled = _ref.disabled,
      direction = _ref.direction,
      items = _ref.items,
      label = _ref.label,
      ariaLabel = _ref['aria-label'],
      deprecatedAriaLabel = _ref.ariaLabel,
      _ref$itemToString = _ref.itemToString,
      itemToString = _ref$itemToString === void 0 ? defaultItemToString : _ref$itemToString,
      itemToElement = _ref.itemToElement,
      renderSelectedItem = _ref.renderSelectedItem,
      type = _ref.type,
      size = _ref.size,
      onChange = _ref.onChange,
      id = _ref.id,
      titleText = _ref.titleText,
      hideLabel = _ref.hideLabel,
      helperText = _ref.helperText,
      translateWithId = _ref.translateWithId,
      light = _ref.light,
      invalid = _ref.invalid,
      invalidText = _ref.invalidText,
      warn = _ref.warn,
      warnText = _ref.warnText,
      initialSelectedItem = _ref.initialSelectedItem,
      controlledSelectedItem = _ref.selectedItem,
      downshiftProps = _ref.downshiftProps,
      readOnly = _ref.readOnly,
      other = _objectWithoutProperties(_ref, _excluded);

  var prefix = usePrefix();

  var _useContext = useContext(FormContext),
      isFluid = _useContext.isFluid;

  var selectProps = _objectSpread2(_objectSpread2({}, downshiftProps), {}, {
    items: items,
    itemToString: itemToString,
    initialSelectedItem: initialSelectedItem,
    onSelectedItemChange: onSelectedItemChange
  });

  var _useRef = useRef(getInstanceId()),
      dropdownInstanceId = _useRef.current; // only set selectedItem if the prop is defined. Setting if it is undefined
  // will overwrite default selected items from useSelect


  if (controlledSelectedItem !== undefined) {
    selectProps.selectedItem = controlledSelectedItem;
  }

  var _useSelect = useSelect(selectProps),
      isOpen = _useSelect.isOpen,
      getToggleButtonProps = _useSelect.getToggleButtonProps,
      getLabelProps = _useSelect.getLabelProps,
      getMenuProps = _useSelect.getMenuProps,
      getItemProps = _useSelect.getItemProps,
      highlightedIndex = _useSelect.highlightedIndex,
      selectedItem = _useSelect.selectedItem;

  var inline = type === 'inline';
  var showWarning = !invalid && warn;
  var enabled = useFeatureFlag('enable-v11-release');

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isFocused = _useState2[0],
      setIsFocused = _useState2[1];

  var className = cx("".concat(prefix, "--dropdown"), [enabled ? null : containerClassName], (_cx = {}, _defineProperty(_cx, "".concat(prefix, "--dropdown--invalid"), invalid), _defineProperty(_cx, "".concat(prefix, "--dropdown--warning"), showWarning), _defineProperty(_cx, "".concat(prefix, "--dropdown--open"), isOpen), _defineProperty(_cx, "".concat(prefix, "--dropdown--inline"), inline), _defineProperty(_cx, "".concat(prefix, "--dropdown--disabled"), disabled), _defineProperty(_cx, "".concat(prefix, "--dropdown--light"), light), _defineProperty(_cx, "".concat(prefix, "--dropdown--readonly"), readOnly), _defineProperty(_cx, "".concat(prefix, "--dropdown--").concat(size), size), _defineProperty(_cx, "".concat(prefix, "--list-box--up"), direction === 'top'), _cx));
  var titleClasses = cx("".concat(prefix, "--label"), (_cx2 = {}, _defineProperty(_cx2, "".concat(prefix, "--label--disabled"), disabled), _defineProperty(_cx2, "".concat(prefix, "--visually-hidden"), hideLabel), _cx2));
  var helperClasses = cx("".concat(prefix, "--form__helper-text"), _defineProperty({}, "".concat(prefix, "--form__helper-text--disabled"), disabled));
  var wrapperClasses = cx("".concat(prefix, "--dropdown__wrapper"), "".concat(prefix, "--list-box__wrapper"), [enabled ? containerClassName : null], (_cx4 = {}, _defineProperty(_cx4, "".concat(prefix, "--dropdown__wrapper--inline"), inline), _defineProperty(_cx4, "".concat(prefix, "--list-box__wrapper--inline"), inline), _defineProperty(_cx4, "".concat(prefix, "--dropdown__wrapper--inline--invalid"), inline && invalid), _defineProperty(_cx4, "".concat(prefix, "--list-box__wrapper--inline--invalid"), inline && invalid), _defineProperty(_cx4, "".concat(prefix, "--list-box__wrapper--fluid--invalid"), isFluid && invalid), _defineProperty(_cx4, "".concat(prefix, "--list-box__wrapper--fluid--focus"), isFluid && isFocused && !isOpen), _cx4));
  var helperId = !helperText ? undefined : "dropdown-helper-text-".concat(dropdownInstanceId); // needs to be Capitalized for react to render it correctly

  var ItemToElement = itemToElement;
  var toggleButtonProps = getToggleButtonProps();
  var helper = helperText && !isFluid ? /*#__PURE__*/React__default.createElement("div", {
    id: helperId,
    className: helperClasses
  }, helperText) : null;

  function onSelectedItemChange(_ref2) {
    var selectedItem = _ref2.selectedItem;
    setIsFocused(false);

    if (onChange) {
      onChange({
        selectedItem: selectedItem !== null && selectedItem !== void 0 ? selectedItem : null
      });
    }
  }

  var menuItemOptionRefs = useRef(items.map(function (_) {
    return /*#__PURE__*/React__default.createRef();
  }));

  var handleFocus = function handleFocus(evt) {
    setIsFocused(evt.type === 'focus' ? true : false);
  };

  var mergedRef = mergeRefs(toggleButtonProps.ref, ref);
  var readOnlyEventHandlers = readOnly ? {
    onClick: function onClick(evt) {
      // NOTE: does not prevent click
      evt.preventDefault(); // focus on the element as per readonly input behavior

      if (mergedRef.current !== undefined) {
        mergedRef.current.focus();
      }
    },
    onKeyDown: function onKeyDown(evt) {
      var selectAccessKeys = ['ArrowDown', 'ArrowUp', ' ', 'Enter']; // This prevents the select from opening for the above keys

      if (selectAccessKeys.includes(evt.key)) {
        evt.preventDefault();
      }
    }
  } : {};
  return /*#__PURE__*/React__default.createElement("div", _extends({
    className: wrapperClasses
  }, other), titleText && /*#__PURE__*/React__default.createElement("label", _extends({
    className: titleClasses
  }, getLabelProps()), titleText), /*#__PURE__*/React__default.createElement(ListBox, {
    onFocus: handleFocus,
    onBlur: handleFocus,
    "aria-label": deprecatedAriaLabel || ariaLabel,
    size: size,
    className: className,
    invalid: invalid,
    invalidText: invalidText,
    warn: warn,
    warnText: warnText,
    light: light,
    isOpen: isOpen,
    id: id
  }, invalid && /*#__PURE__*/React__default.createElement(WarningFilled, {
    className: "".concat(prefix, "--list-box__invalid-icon")
  }), showWarning && /*#__PURE__*/React__default.createElement(WarningAltFilled, {
    className: "".concat(prefix, "--list-box__invalid-icon ").concat(prefix, "--list-box__invalid-icon--warning")
  }), /*#__PURE__*/React__default.createElement("button", _extends({
    type: "button" // aria-expanded is already being passed through {...toggleButtonProps}
    ,
    role: "combobox" // eslint-disable-line jsx-a11y/role-has-required-aria-props
    ,
    "aria-controls": getMenuProps().id,
    className: "".concat(prefix, "--list-box__field"),
    disabled: disabled,
    "aria-disabled": readOnly ? true : undefined // aria-disabled to remain focusable
    ,
    "aria-describedby": !inline && !invalid && !warn && helper ? helperId : undefined,
    title: selectedItem && itemToString !== undefined ? itemToString(selectedItem) : label
  }, toggleButtonProps, readOnlyEventHandlers, {
    ref: mergedRef
  }), /*#__PURE__*/React__default.createElement("span", {
    className: "".concat(prefix, "--list-box__label")
  }, selectedItem ? renderSelectedItem ? renderSelectedItem(selectedItem) : itemToString(selectedItem) : label), /*#__PURE__*/React__default.createElement(ListBox.MenuIcon, {
    isOpen: isOpen,
    translateWithId: translateWithId
  })), /*#__PURE__*/React__default.createElement(ListBox.Menu, getMenuProps(), isOpen && items.map(function (item, index) {
    var isObject = item !== null && _typeof(item) === 'object';
    var disabled = isObject && 'disabled' in item && item.disabled === true;
    var itemProps = getItemProps({
      item: item,
      index: index,
      disabled: disabled
    });
    var title = isObject && 'text' in item && itemToElement ? item.text : itemToString(item);
    return /*#__PURE__*/React__default.createElement(ListBox.MenuItem, _extends({
      key: itemProps.id,
      isActive: selectedItem === item,
      isHighlighted: highlightedIndex === index || selectedItem === item,
      title: title,
      ref: {
        menuItemOptionRef: menuItemOptionRefs.current[index]
      }
    }, itemProps), _typeof(item) === 'object' && ItemToElement !== undefined && ItemToElement !== null ? /*#__PURE__*/React__default.createElement(ItemToElement, _extends({
      key: itemProps.id
    }, item)) : itemToString(item), selectedItem === item && /*#__PURE__*/React__default.createElement(Checkmark, {
      className: "".concat(prefix, "--list-box__menu-item__selected-icon")
    }));
  }))), !inline && !invalid && !warn && helper);
});
Dropdown.displayName = 'Dropdown';
Dropdown.propTypes = (_Dropdown$propTypes = {}, _defineProperty(_Dropdown$propTypes, 'aria-label', PropTypes.string), _defineProperty(_Dropdown$propTypes, "ariaLabel", deprecate(PropTypes.string, 'This prop syntax has been deprecated. Please use the new `aria-label`.')), _defineProperty(_Dropdown$propTypes, "className", PropTypes.string), _defineProperty(_Dropdown$propTypes, "direction", PropTypes.oneOf(['top', 'bottom'])), _defineProperty(_Dropdown$propTypes, "disabled", PropTypes.bool), _defineProperty(_Dropdown$propTypes, "downshiftProps", PropTypes.object), _defineProperty(_Dropdown$propTypes, "helperText", PropTypes.node), _defineProperty(_Dropdown$propTypes, "hideLabel", PropTypes.bool), _defineProperty(_Dropdown$propTypes, "id", PropTypes.string.isRequired), _defineProperty(_Dropdown$propTypes, "initialSelectedItem", PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.number])), _defineProperty(_Dropdown$propTypes, "invalid", PropTypes.bool), _defineProperty(_Dropdown$propTypes, "invalidText", PropTypes.node), _defineProperty(_Dropdown$propTypes, "itemToElement", PropTypes.func), _defineProperty(_Dropdown$propTypes, "itemToString", PropTypes.func), _defineProperty(_Dropdown$propTypes, "items", PropTypes.array.isRequired), _defineProperty(_Dropdown$propTypes, "label", PropTypes.node.isRequired), _defineProperty(_Dropdown$propTypes, "light", deprecate(PropTypes.bool, 'The `light` prop for `Dropdown` has ' + 'been deprecated in favor of the new `Layer` component. It will be removed in the next major release.')), _defineProperty(_Dropdown$propTypes, "onChange", PropTypes.func), _defineProperty(_Dropdown$propTypes, "readOnly", PropTypes.bool), _defineProperty(_Dropdown$propTypes, "renderSelectedItem", PropTypes.func), _defineProperty(_Dropdown$propTypes, "selectedItem", PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.number])), _defineProperty(_Dropdown$propTypes, "size", ListBoxSize), _defineProperty(_Dropdown$propTypes, "titleText", PropTypes.node.isRequired), _defineProperty(_Dropdown$propTypes, "translateWithId", PropTypes.func), _defineProperty(_Dropdown$propTypes, "type", ListBoxType), _defineProperty(_Dropdown$propTypes, "warn", PropTypes.bool), _defineProperty(_Dropdown$propTypes, "warnText", PropTypes.node), _Dropdown$propTypes);
Dropdown.defaultProps = {
  disabled: false,
  type: 'default',
  itemToString: defaultItemToString,
  itemToElement: null,
  titleText: '',
  helperText: '',
  direction: 'bottom'
};

export { Dropdown as default };

/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');

/**
 * @typedef {object} useAttachedMenuReturn
 * @property {boolean} open Whether the menu is open or not
 * @property {[number, number]} x The x position of the menu
 * @property {[number, number]} y The y position of the menu
 * @property {Function} handleClick A function to be called when the trigger element receives a click event
 * @property {Function} handleMousedown A function to be called when the trigger element recives a mousedown event
 * @property {Function} handleClose A function to be called when the menu emits onClose
 */

/**
 * This hook contains common code to be used when a menu should be visually attached to an anchor based on a click event.
 *
 * @param {Element|object} anchor The element or ref the menu should visually be attached to.
 * @returns {useAttachedMenuReturn}
 */

function useAttachedMenu(anchor) {
  var _useState = React.useState(false),
      _useState2 = _rollupPluginBabelHelpers.slicedToArray(_useState, 2),
      open = _useState2[0],
      setOpen = _useState2[1];

  var _useState3 = React.useState([[-1, -1], [-1, -1]]),
      _useState4 = _rollupPluginBabelHelpers.slicedToArray(_useState3, 2),
      position = _useState4[0],
      setPosition = _useState4[1];

  function openMenu() {
    var anchorEl = (anchor === null || anchor === void 0 ? void 0 : anchor.current) || anchor;

    if (anchorEl) {
      var _anchorEl$getBounding = anchorEl.getBoundingClientRect(),
          left = _anchorEl$getBounding.left,
          top = _anchorEl$getBounding.top,
          right = _anchorEl$getBounding.right,
          bottom = _anchorEl$getBounding.bottom;

      setPosition([[left, right], [top, bottom]]);
    }

    setOpen(true);
  }

  function closeMenu() {
    setOpen(false);
  }

  function handleClick() {
    if (open) {
      closeMenu();
    } else {
      openMenu();
    }
  }

  function handleMousedown(e) {
    // prevent default for mousedown on trigger element to avoid
    // the "blur" event from firing on the menu as this would close
    // it and immediately re-open since "click" event is fired after
    // "blur" event.
    e.preventDefault();
  }

  return {
    open: open,
    x: position[0],
    y: position[1],
    handleClick: handleClick,
    handleMousedown: handleMousedown,
    handleClose: closeMenu
  };
}

exports.useAttachedMenu = useAttachedMenu;

/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var PropTypes = require('prop-types');
var cx = require('classnames');
var iconsReact = require('@carbon/icons-react');
var Button = require('../Button/Button.js');
var index = require('../IconButton/index.js');
var Menu = require('../Menu/Menu.js');
var useAttachedMenu = require('../../internal/useAttachedMenu.js');
var useId = require('../../internal/useId.js');
var useMergedRefs = require('../../internal/useMergedRefs.js');
var usePrefix = require('../../internal/usePrefix.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);

var _ChevronDown;

var _excluded = ["children", "className", "disabled", "label", "onClick", "size", "tooltipAlign", "translateWithId"];
var spacing = 4; // top and bottom spacing between the button and the menu. in px

var defaultTranslations = {
  'carbon.combo-button.additional-actions': 'Additional actions'
};

function defaultTranslateWithId(messageId) {
  return defaultTranslations[messageId];
}

var ComboButton = /*#__PURE__*/React__default["default"].forwardRef(function ComboButton(_ref, forwardRef) {
  var children = _ref.children,
      className = _ref.className,
      disabled = _ref.disabled,
      label = _ref.label,
      onClick = _ref.onClick,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'lg' : _ref$size,
      tooltipAlign = _ref.tooltipAlign,
      _ref$translateWithId = _ref.translateWithId,
      t = _ref$translateWithId === void 0 ? defaultTranslateWithId : _ref$translateWithId,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(_ref, _excluded);

  var id = useId.useId('combobutton');
  var prefix = usePrefix.usePrefix();
  var containerRef = React.useRef(null);
  var menuRef = React.useRef(null);
  var ref = useMergedRefs.useMergedRefs([forwardRef, containerRef]);

  var _useState = React.useState(0),
      _useState2 = _rollupPluginBabelHelpers.slicedToArray(_useState, 2),
      width = _useState2[0],
      setWidth = _useState2[1];

  var _useAttachedMenu = useAttachedMenu.useAttachedMenu(containerRef),
      open = _useAttachedMenu.open,
      x = _useAttachedMenu.x,
      y = _useAttachedMenu.y,
      hookOnClick = _useAttachedMenu.handleClick,
      handleTriggerMousedown = _useAttachedMenu.handleMousedown,
      handleClose = _useAttachedMenu.handleClose;

  function handleTriggerClick() {
    if (containerRef.current) {
      var _containerRef$current = containerRef.current.getBoundingClientRect(),
          w = _containerRef$current.width;

      setWidth(w);
      hookOnClick();
    }
  }

  function handlePrimaryActionClick(e) {
    if (onClick) {
      onClick(e);
    }
  }

  function handleOpen() {
    menuRef.current.style.width = "".concat(width, "px");
  }

  var containerClasses = cx__default["default"]("".concat(prefix, "--combo-button__container"), "".concat(prefix, "--combo-button__container--").concat(size), _rollupPluginBabelHelpers.defineProperty({}, "".concat(prefix, "--combo-button__container--open"), open), className);
  var primaryActionClasses = cx__default["default"]("".concat(prefix, "--combo-button__primary-action"));
  var triggerClasses = cx__default["default"]("".concat(prefix, "--combo-button__trigger"));
  return /*#__PURE__*/React__default["default"].createElement("div", _rollupPluginBabelHelpers["extends"]({}, rest, {
    className: containerClasses,
    ref: ref
  }), /*#__PURE__*/React__default["default"].createElement("div", {
    className: primaryActionClasses
  }, /*#__PURE__*/React__default["default"].createElement(Button["default"], {
    size: size,
    disabled: disabled,
    onClick: handlePrimaryActionClick
  }, label)), /*#__PURE__*/React__default["default"].createElement(index.IconButton, {
    className: triggerClasses,
    label: t('carbon.combo-button.additional-actions'),
    size: size,
    disabled: disabled,
    align: tooltipAlign,
    "aria-haspopup": true,
    "aria-expanded": open,
    onClick: handleTriggerClick,
    onMouseDown: handleTriggerMousedown,
    "aria-owns": open ? id : null
  }, _ChevronDown || (_ChevronDown = /*#__PURE__*/React__default["default"].createElement(iconsReact.ChevronDown, null))), /*#__PURE__*/React__default["default"].createElement(Menu.Menu, {
    ref: menuRef,
    id: id,
    label: t('carbon.combo-button.additional-actions'),
    size: size,
    open: open,
    onClose: handleClose,
    onOpen: handleOpen,
    x: x,
    y: [y[0] - spacing, y[1] + spacing]
  }, children));
});
ComboButton.propTypes = {
  /**
   * A collection of MenuItems to be rendered as additional actions for this ComboButton.
   */
  children: PropTypes__default["default"].node.isRequired,

  /**
   * Additional CSS class names.
   */
  className: PropTypes__default["default"].string,

  /**
   * Specify whether the ComboButton should be disabled, or not.
   */
  disabled: PropTypes__default["default"].bool,

  /**
   * Provide the label to be renderd on the primary action button.
   */
  label: PropTypes__default["default"].string.isRequired,

  /**
   * Provide an optional function to be called when the primary action element is clicked.
   */
  onClick: PropTypes__default["default"].func,

  /**
   * Specify the size of the buttons and menu.
   */
  size: PropTypes__default["default"].oneOf(['sm', 'md', 'lg']),

  /**
   * Specify how the trigger tooltip should be aligned.
   */
  tooltipAlign: PropTypes__default["default"].oneOf(['top', 'top-left', 'top-right', 'bottom', 'bottom-left', 'bottom-right', 'left', 'right']),

  /**
   * Optional method that takes in a message id and returns an
   * internationalized string.
   */
  translateWithId: PropTypes__default["default"].func
};

exports.ComboButton = ComboButton;

/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var PropTypes = require('prop-types');
var React = require('react');
var deprecate = require('../../prop-types/deprecate.js');
var usePrefix = require('../../internal/usePrefix.js');
var useMergedRefs = require('../../internal/useMergedRefs.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var _InlineCheckbox$propT;
/** @type any */

var InlineCheckbox = /*#__PURE__*/React__default["default"].forwardRef(function InlineCheckbox(props, forwardRef) {
  var ariaLabel = props['aria-label'],
      deprecatedAriaLabel = props.ariaLabel,
      _props$checked = props.checked,
      checked = _props$checked === void 0 ? false : _props$checked,
      disabled = props.disabled,
      id = props.id,
      indeterminate = props.indeterminate,
      name = props.name,
      _props$onChange = props.onChange,
      _onChange = _props$onChange === void 0 ? function () {} : _props$onChange,
      onClick = props.onClick,
      onKeyDown = props.onKeyDown,
      title = props.title;

  var prefix = usePrefix.usePrefix();
  var inputRef = React.useRef(null);
  var ref = useMergedRefs.useMergedRefs([inputRef, forwardRef]);
  var inputProps = {
    checked: checked,
    className: "".concat(prefix, "--checkbox"),
    disabled: disabled,
    id: id,
    name: name,
    onClick: onClick,
    onChange: function onChange(evt) {
      _onChange(evt.target.checked, id, evt);
    },
    onKeyDown: onKeyDown,
    ref: ref,
    type: 'checkbox'
  };

  if (indeterminate) {
    inputProps.checked = false;
  }

  React.useEffect(function () {
    inputRef.current.indeterminate = indeterminate;
  }, [indeterminate]);
  return /*#__PURE__*/React__default["default"].createElement("div", {
    className: "".concat(prefix, "--checkbox--inline")
  }, /*#__PURE__*/React__default["default"].createElement("input", inputProps),
  /*#__PURE__*/

  /* eslint-disable jsx-a11y/label-has-for,jsx-a11y/label-has-associated-control,jsx-a11y/click-events-have-key-events,jsx-a11y/no-noninteractive-element-interactions */
  React__default["default"].createElement("label", {
    htmlFor: id,
    className: "".concat(prefix, "--checkbox-label"),
    "aria-label": deprecatedAriaLabel || ariaLabel,
    title: title,
    onClick: function onClick(evt) {
      evt.stopPropagation();
    }
  }));
});
InlineCheckbox.propTypes = (_InlineCheckbox$propT = {}, _rollupPluginBabelHelpers.defineProperty(_InlineCheckbox$propT, 'aria-label', PropTypes__default["default"].string.isRequired), _rollupPluginBabelHelpers.defineProperty(_InlineCheckbox$propT, "ariaLabel", deprecate["default"](PropTypes__default["default"].string.isRequired, 'The `ariaLabel` prop has been deprecated in favor of `aria-label`. This prop will be removed in the next major release.')), _rollupPluginBabelHelpers.defineProperty(_InlineCheckbox$propT, "checked", PropTypes__default["default"].bool), _rollupPluginBabelHelpers.defineProperty(_InlineCheckbox$propT, "disabled", PropTypes__default["default"].bool), _rollupPluginBabelHelpers.defineProperty(_InlineCheckbox$propT, "id", PropTypes__default["default"].string.isRequired), _rollupPluginBabelHelpers.defineProperty(_InlineCheckbox$propT, "indeterminate", PropTypes__default["default"].bool), _rollupPluginBabelHelpers.defineProperty(_InlineCheckbox$propT, "name", PropTypes__default["default"].string.isRequired), _rollupPluginBabelHelpers.defineProperty(_InlineCheckbox$propT, "onChange", PropTypes__default["default"].func), _rollupPluginBabelHelpers.defineProperty(_InlineCheckbox$propT, "onClick", PropTypes__default["default"].func), _rollupPluginBabelHelpers.defineProperty(_InlineCheckbox$propT, "onKeyDown", PropTypes__default["default"].func), _rollupPluginBabelHelpers.defineProperty(_InlineCheckbox$propT, "title", PropTypes__default["default"].string), _InlineCheckbox$propT);
var InlineCheckbox$1 = InlineCheckbox;

exports["default"] = InlineCheckbox$1;

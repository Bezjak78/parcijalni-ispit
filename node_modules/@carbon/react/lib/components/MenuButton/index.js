/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var PropTypes = require('prop-types');
var cx = require('classnames');
var iconsReact = require('@carbon/icons-react');
var Button = require('../Button/Button.js');
var Menu = require('../Menu/Menu.js');
var useAttachedMenu = require('../../internal/useAttachedMenu.js');
var useId = require('../../internal/useId.js');
var useMergedRefs = require('../../internal/useMergedRefs.js');
var usePrefix = require('../../internal/usePrefix.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);

var _excluded = ["children", "className", "disabled", "kind", "label", "size"];
var spacing = 4; // top and bottom spacing between the button and the menu. in px

var validButtonKinds = ['primary', 'tertiary', 'ghost'];
var defaultButtonKind = 'primary';
var MenuButton = /*#__PURE__*/React__default["default"].forwardRef(function MenuButton(_ref, forwardRef) {
  var children = _ref.children,
      className = _ref.className,
      disabled = _ref.disabled,
      _ref$kind = _ref.kind,
      kind = _ref$kind === void 0 ? defaultButtonKind : _ref$kind,
      label = _ref.label,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'lg' : _ref$size,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(_ref, _excluded);

  var id = useId.useId('MenuButton');
  var prefix = usePrefix.usePrefix();
  var triggerRef = React.useRef(null);
  var menuRef = React.useRef(null);
  var ref = useMergedRefs.useMergedRefs([forwardRef, triggerRef]);

  var _useState = React.useState(0),
      _useState2 = _rollupPluginBabelHelpers.slicedToArray(_useState, 2),
      width = _useState2[0],
      setWidth = _useState2[1];

  var _useAttachedMenu = useAttachedMenu.useAttachedMenu(triggerRef),
      open = _useAttachedMenu.open,
      x = _useAttachedMenu.x,
      y = _useAttachedMenu.y,
      hookOnClick = _useAttachedMenu.handleClick,
      handleMousedown = _useAttachedMenu.handleMousedown,
      handleClose = _useAttachedMenu.handleClose;

  function handleClick() {
    if (triggerRef.current) {
      var _triggerRef$current$g = triggerRef.current.getBoundingClientRect(),
          w = _triggerRef$current$g.width;

      setWidth(w);
      hookOnClick();
    }
  }

  function handleOpen() {
    menuRef.current.style.width = "".concat(width, "px");
  }

  var triggerClasses = cx__default["default"]("".concat(prefix, "--menu-button__trigger"), _rollupPluginBabelHelpers.defineProperty({}, "".concat(prefix, "--menu-button__trigger--open"), open), className);
  var buttonKind = validButtonKinds.includes(kind) ? kind : defaultButtonKind;
  return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(Button["default"], _rollupPluginBabelHelpers["extends"]({}, rest, {
    ref: ref,
    className: triggerClasses,
    size: size,
    kind: buttonKind,
    renderIcon: iconsReact.ChevronDown,
    disabled: disabled,
    "aria-haspopup": true,
    "aria-expanded": open,
    onClick: handleClick,
    onMouseDown: handleMousedown,
    "aria-owns": open ? id : null
  }), label), /*#__PURE__*/React__default["default"].createElement(Menu.Menu, {
    ref: menuRef,
    id: id,
    label: label,
    size: size,
    open: open,
    onClose: handleClose,
    onOpen: handleOpen,
    x: x,
    y: [y[0] - spacing, y[1] + spacing]
  }, children));
});
MenuButton.propTypes = {
  /**
   * A collection of MenuItems to be rendered as actions for this MenuButton.
   */
  children: PropTypes__default["default"].node.isRequired,

  /**
   * Additional CSS class names.
   */
  className: PropTypes__default["default"].string,

  /**
   * Specify whether the MenuButton should be disabled, or not.
   */
  disabled: PropTypes__default["default"].bool,

  /**
   * Specify the type of button to be used as the base for the trigger button.
   */
  kind: PropTypes__default["default"].oneOf(validButtonKinds),

  /**
   * Provide the label to be renderd on the trigger button.
   */
  label: PropTypes__default["default"].string.isRequired,

  /**
   * Specify the size of the button and menu.
   */
  size: PropTypes__default["default"].oneOf(['sm', 'md', 'lg'])
};

exports.MenuButton = MenuButton;

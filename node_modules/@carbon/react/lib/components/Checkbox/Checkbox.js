/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var PropTypes = require('prop-types');
var React = require('react');
var cx = require('classnames');
require('../Text/index.js');
var usePrefix = require('../../internal/usePrefix.js');
var iconsReact = require('@carbon/icons-react');
var setupGetInstanceId = require('../../tools/setupGetInstanceId.js');
var Text = require('../Text/Text.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);

var _excluded = ["className", "helperText", "id", "labelText", "onChange", "onClick", "indeterminate", "invalid", "invalidText", "hideLabel", "readOnly", "title", "warn", "warnText"];
var getInstanceId = setupGetInstanceId["default"]();
var Checkbox = /*#__PURE__*/React__default["default"].forwardRef(function (_ref, _ref2) {
  var _classNames;

  var className = _ref.className,
      helperText = _ref.helperText,
      id = _ref.id,
      labelText = _ref.labelText,
      _onChange = _ref.onChange,
      _onClick = _ref.onClick,
      indeterminate = _ref.indeterminate,
      invalid = _ref.invalid,
      invalidText = _ref.invalidText,
      hideLabel = _ref.hideLabel,
      readOnly = _ref.readOnly,
      _ref$title = _ref.title,
      title = _ref$title === void 0 ? '' : _ref$title,
      warn = _ref.warn,
      warnText = _ref.warnText,
      other = _rollupPluginBabelHelpers.objectWithoutProperties(_ref, _excluded);

  var prefix = usePrefix.usePrefix();
  var showWarning = !readOnly && !invalid && warn;
  var showHelper = !invalid && !warn;
  var checkboxGroupInstanceId = getInstanceId();
  var helperId = !helperText ? undefined : "checkbox-helper-text-".concat(checkboxGroupInstanceId);
  var helper = helperText ? /*#__PURE__*/React__default["default"].createElement("div", {
    id: helperId,
    className: "".concat(prefix, "--form__helper-text")
  }, helperText) : null;
  var wrapperClasses = cx__default["default"]("".concat(prefix, "--form-item"), "".concat(prefix, "--checkbox-wrapper"), className, (_classNames = {}, _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--checkbox-wrapper--readonly"), readOnly), _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--checkbox-wrapper--invalid"), !readOnly && invalid), _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--checkbox-wrapper--warning"), showWarning), _classNames));
  var innerLabelClasses = cx__default["default"]("".concat(prefix, "--checkbox-label-text"), _rollupPluginBabelHelpers.defineProperty({}, "".concat(prefix, "--visually-hidden"), hideLabel));
  return /*#__PURE__*/React__default["default"].createElement("div", {
    className: wrapperClasses
  }, /*#__PURE__*/React__default["default"].createElement("input", _rollupPluginBabelHelpers["extends"]({}, other, {
    type: "checkbox",
    "data-invalid": invalid ? true : undefined,
    onChange: function onChange(evt) {
      if (!readOnly && _onChange) {
        _onChange(evt, {
          checked: evt.target.checked,
          id: id
        });
      }
    },
    className: "".concat(prefix, "--checkbox"),
    id: id,
    ref: function ref(el) {
      if (el && indeterminate) {
        el.indeterminate = indeterminate;
      }

      if (typeof _ref2 === 'function') {
        _ref2(el);
      } else if (_ref2 && Object(_ref2) === _ref2) {
        _ref2.current = el;
      }
    } // readonly attribute not applicable to type="checkbox"
    // see - https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox
    ,
    "aria-readonly": readOnly,
    onClick: function onClick(evt) {
      if (readOnly) {
        // prevent default stops the checkbox being updated
        evt.preventDefault();
      } // pass onClick event on to the user even if readonly


      if (_onClick) {
        _onClick(evt);
      }
    }
  })), /*#__PURE__*/React__default["default"].createElement("label", {
    htmlFor: id,
    className: "".concat(prefix, "--checkbox-label"),
    title: title
  }, /*#__PURE__*/React__default["default"].createElement(Text.Text, {
    className: innerLabelClasses
  }, labelText)), /*#__PURE__*/React__default["default"].createElement("div", {
    className: "".concat(prefix, "--checkbox__validation-msg")
  }, !readOnly && invalid && /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(iconsReact.WarningFilled, {
    className: "".concat(prefix, "--checkbox__invalid-icon")
  }), /*#__PURE__*/React__default["default"].createElement("div", {
    className: "".concat(prefix, "--form-requirement")
  }, invalidText)), showWarning && /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(iconsReact.WarningAltFilled, {
    className: "".concat(prefix, "--checkbox__invalid-icon ").concat(prefix, "--checkbox__invalid-icon--warning")
  }), /*#__PURE__*/React__default["default"].createElement("div", {
    className: "".concat(prefix, "--form-requirement")
  }, warnText))), showHelper && helper);
});
Checkbox.propTypes = {
  /**
   * Specify whether the underlying input should be checked
   */
  checked: PropTypes__default["default"].bool,

  /**
   * Specify an optional className to be applied to the <label> node
   */
  className: PropTypes__default["default"].string,

  /**
   * Specify whether the underlying input should be checked by default
   */
  defaultChecked: PropTypes__default["default"].bool,

  /**
   * Specify whether the Checkbox should be disabled
   */
  disabled: PropTypes__default["default"].bool,

  /**
   * Provide text for the form group for additional help
   */
  helperText: PropTypes__default["default"].node,

  /**
   * Specify whether the label should be hidden, or not
   */
  hideLabel: PropTypes__default["default"].bool,

  /**
   * Provide an `id` to uniquely identify the Checkbox input
   */
  id: PropTypes__default["default"].string.isRequired,

  /**
   * Specify whether the Checkbox is in an indeterminate state
   */
  indeterminate: PropTypes__default["default"].bool,

  /**
   * Specify whether the Checkbox is currently invalid
   */
  invalid: PropTypes__default["default"].bool,

  /**
   * Provide the text that is displayed when the Checkbox is in an invalid state
   */
  invalidText: PropTypes__default["default"].node,

  /**
   * Provide a label to provide a description of the Checkbox input that you are
   * exposing to the user
   */
  labelText: PropTypes__default["default"].node.isRequired,

  /**
   * Provide an optional handler that is called when the internal state of
   * Checkbox changes. This handler is called with event and state info.
   * `(event, { checked, id }) => void`
   */
  onChange: PropTypes__default["default"].func,

  /**
   * Specify whether the Checkbox is read-only
   */
  readOnly: PropTypes__default["default"].bool,

  /**
   * Specify a title for the <label> node for the Checkbox
   */
  title: PropTypes__default["default"].string,

  /**
   * Specify whether the Checkbox is currently in warning state
   */
  warn: PropTypes__default["default"].bool,

  /**
   * Provide the text that is displayed when the Checkbox is in warning state
   */
  warnText: PropTypes__default["default"].node
};
Checkbox.defaultProps = {
  onChange: function onChange() {},
  indeterminate: false
};
Checkbox.displayName = 'Checkbox';

exports["default"] = Checkbox;

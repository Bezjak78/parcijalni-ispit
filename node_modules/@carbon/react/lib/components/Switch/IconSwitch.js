/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var PropTypes = require('prop-types');
var React = require('react');
var cx = require('classnames');
var index = require('../IconButton/index.js');
var usePrefix = require('../../internal/usePrefix.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);

var _excluded = ["align", "children", "className", "disabled", "enterDelayMs", "index", "leaveDelayMs", "name", "onClick", "onKeyDown", "selected", "size", "text"];

var noopFn = function noopFn() {};

var IconSwitch = /*#__PURE__*/React__default["default"].forwardRef(function Switch(props, tabRef) {
  var _classNames2;

  var align = props.align,
      children = props.children,
      className = props.className,
      disabled = props.disabled,
      enterDelayMs = props.enterDelayMs,
      index$1 = props.index,
      _props$leaveDelayMs = props.leaveDelayMs,
      leaveDelayMs = _props$leaveDelayMs === void 0 ? 0 : _props$leaveDelayMs,
      name = props.name,
      _props$onClick = props.onClick,
      onClick = _props$onClick === void 0 ? noopFn : _props$onClick,
      _props$onKeyDown = props.onKeyDown,
      onKeyDown = _props$onKeyDown === void 0 ? noopFn : _props$onKeyDown,
      _props$selected = props.selected,
      selected = _props$selected === void 0 ? false : _props$selected,
      size = props.size,
      text = props.text,
      other = _rollupPluginBabelHelpers.objectWithoutProperties(props, _excluded);

  var prefix = usePrefix.usePrefix();

  var _useState = React.useState(false),
      _useState2 = _rollupPluginBabelHelpers.slicedToArray(_useState, 2),
      isHovered = _useState2[0],
      setIsHovered = _useState2[1];

  var handleClick = function handleClick(e) {
    e.preventDefault();
    onClick({
      index: index$1,
      name: name,
      text: text
    });
  };

  var handleKeyDown = function handleKeyDown(event) {
    var key = event.key || event.which;
    onKeyDown({
      index: index$1,
      name: name,
      text: text,
      key: key
    });
  };

  var handleMouseEnter = function handleMouseEnter() {
    setIsHovered(true);
  };

  var handleMouseLeave = function handleMouseLeave() {
    setIsHovered(false);
  };

  var classes = cx__default["default"](className, "".concat(prefix, "--content-switcher-btn"), _rollupPluginBabelHelpers.defineProperty({}, "".concat(prefix, "--content-switcher--selected"), selected));
  var iconButtonClasses = cx__default["default"]("".concat(prefix, "--content-switcher-popover__wrapper"), (_classNames2 = {}, _rollupPluginBabelHelpers.defineProperty(_classNames2, "".concat(prefix, "--content-switcher-popover--selected"), selected), _rollupPluginBabelHelpers.defineProperty(_classNames2, "".concat(prefix, "--content-switcher-popover--disabled"), disabled), _classNames2));
  var commonProps = {
    onClick: handleClick,
    onKeyDown: handleKeyDown,
    className: classes,
    disabled: disabled,
    align: align,
    enterDelayMs: enterDelayMs,
    leaveDelayMs: leaveDelayMs,
    size: size
  };
  return /*#__PURE__*/React__default["default"].createElement(index.IconButton, _rollupPluginBabelHelpers["extends"]({
    label: text,
    type: "button",
    ref: tabRef,
    role: "tab",
    tabIndex: selected || isHovered ? 0 : -1,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave,
    onFocus: handleMouseEnter,
    onBlur: handleMouseLeave,
    "aria-selected": selected,
    "aria-label": text,
    wrapperClasses: iconButtonClasses
  }, other, commonProps), children);
});
IconSwitch.displayName = 'IconSwitch';
IconSwitch.propTypes = {
  /**
   * Specify how the trigger should align with the tooltip
   */
  align: PropTypes__default["default"].oneOf(['top', 'top-left', 'top-right', 'bottom', 'bottom-left', 'bottom-right', 'left', 'right']),

  /**
   * Provide child elements to be rendered inside of the Switch
   */
  children: PropTypes__default["default"].node,

  /**
   * Specify an optional className to be added to your Switch
   */
  className: PropTypes__default["default"].string,

  /**
   * Specify whether or not the Switch should be disabled
   */
  disabled: PropTypes__default["default"].bool,

  /**
   * Specify the duration in milliseconds to delay before displaying the tooltip
   */
  enterDelayMs: PropTypes__default["default"].number,

  /**
   * The index of your Switch in your ContentSwitcher that is used for event handlers.
   * Reserved for usage in ContentSwitcher
   */
  index: PropTypes__default["default"].number,

  /**
   * Specify the duration in milliseconds to delay before hiding the tooltip
   */
  leaveDelayMs: PropTypes__default["default"].number,

  /**
   * Provide the name of your Switch that is used for event handlers
   */
  name: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number]),

  /**
   * A handler that is invoked when a user clicks on the control.
   * Reserved for usage in ContentSwitcher
   */
  onClick: PropTypes__default["default"].func,

  /**
   * A handler that is invoked on the key down event for the control.
   * Reserved for usage in ContentSwitcher
   */
  onKeyDown: PropTypes__default["default"].func,

  /**
   * Whether your Switch is selected. Reserved for usage in ContentSwitcher
   */
  selected: PropTypes__default["default"].bool,

  /**
   * Passed in from `ContentSwitcher` to render icon-only variant
   */
  size: PropTypes__default["default"].oneOf(['sm', 'md', 'lg']),

  /**
   * Provide the visible text displayed by the Tooltip
   */
  text: PropTypes__default["default"].string
};
var IconSwitch$1 = IconSwitch;

exports["default"] = IconSwitch$1;
